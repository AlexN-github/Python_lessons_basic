# Задание-1:
# Матрицы в питоне реализуются в виде вложенных списков:
# Пример. Дано:
matrix = [[1, 0, 8],
          [3, 4, 1],
          [0, 4, 2]]
          
# Выполнить поворот (транспонирование) матрицы
# Пример. Результат:
# matrix_rotate = [[1, 3, 0],
#                  [0, 4, 4],
#                  [8, 1, 2]]

# Суть сложности hard: Решите задачу в одну строку

print("\nЗадание-1")

print("rotate_matrix = ", list(map(list, zip(*matrix))))

# Задание-2:
# Найдите наибольшее произведение пяти последовательных цифр в 1000-значном числе.
# Выведите произведение и индекс смещения первого числа последовательных 5-ти цифр.
# Пример 1000-значного числа:
number = """
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"""

print("\nЗадание-2")

def MultipleNum(Num):
    Mult = 1
    for Item in Num:
        Mult = Mult * int(Item)
    return Mult

number = number.replace("\n","")
l = [number[i+1:i+6] for i in range(len(number)-5)]
Max = 0
for inx,Item in enumerate(l):
    Num = MultipleNum(Item)
    if Num > Max:
        Max = Num
        Index = inx
        Sequence = Item

print("MaxMult=",Max,"Index=",Index,"Sequence=",Sequence)
print(len(l))

# Задание-3 (Ферзи):
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били
# друг друга. Вам дана расстановка 8 ферзей на доске.
# Определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел,
# каждое число от 1 до 8 — координаты 8 ферзей.
# Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.


print("\nЗадание-3")


#Ферзи будут бить друг друга если находятся на одной горизонтальной, вертикальной линии
#или на одной диагонали.
#Соответсвенно если есть одинаковые значения координаты X или координаты Y
#или если |X2-X1|/|Y2-Y1|=1 (т.е. угловой коэффициент равен 1 или 45градусов)

#Инициируем исходные данные
#a7, b4, c2, d8, e6, f1, g3, h5:(87)
List = [
    {"X": 1,
     "Y": 7},
    {"X": 2,
     "Y": 4},
    {"X": 3,
     "Y": 2},
    {"X": 4,
     "Y": 8},
    {"X": 5,
     "Y": 6},
    {"X": 6,
     "Y": 1},
    {"X": 7,
     "Y": 3},
    {"X": 8,
     "Y": 5},
]
#Функция проверки на пересечения двух ферзей
def ver(F1, F2):
    if F1["X"] == F2["X"]:
        return True
    elif F1["Y"] == F2["Y"]:
        return True
    elif abs(F1["X"] - F2["X"]) == abs(F1["Y"] - F2["Y"]):
        return True
    else:
        return False

#Проверяем координаты на вышеописанные условия каждый с каждым
for i,item1 in enumerate(List):
    for j,item2 in enumerate(List[i+1:len(List)]):
        if ver(item1, item2):
            print(i,item1,j,item2)
            print("YES")
            exit()
print("NO")
